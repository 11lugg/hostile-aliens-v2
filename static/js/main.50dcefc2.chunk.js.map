{"version":3,"sources":["components/Alien/Alien.jsx","App.js","serviceWorker.js","index.js"],"names":["Alien","state","this","props","name","ships","health","Component","App","motherShips","defenceShips","attackShips","motherValue","defenceValue","attackValue","getRandom","Math","floor","random","randomAttack","setState","handleClick","motherZero","defenceZero","attackZero","handleReset","hitBtn","onClick","resetBtn","button","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAkBeA,G,uNAdbC,MAAQ,G,wEAEN,OACE,6BACE,4BAAKC,KAAKC,MAAMC,MAChB,4BACE,gDAAsBF,KAAKC,MAAME,OACjC,mCAASH,KAAKC,MAAMG,c,GARVC,cCqILC,E,2MAnIbP,MAAQ,CACNQ,YAAa,EACbC,aAAc,EACdC,YAAa,EACbC,YAAa,IACbC,aAAc,GACdC,YAAa,I,EAGfC,UAAY,WACV,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,W,EAGzBC,aAAe,WACY,IAArB,EAAKJ,aACP,EAAKK,SAAS,CAAER,YAAa,EAAKX,MAAMW,YAAc,IAEpD,EAAKG,aAAe,GAAK,EAAKA,aAAe,GAC/C,EAAKK,SAAS,CAAEP,aAAc,EAAKZ,MAAMY,aAAe,KAEtD,EAAKE,aAAe,GAAK,EAAKA,aAAe,IAC/C,EAAKK,SAAS,CAAEN,YAAa,EAAKb,MAAMa,YAAc,M,EAI1DO,YAAc,WACZ,EAAKF,eACL,EAAKG,aACL,EAAKC,cACL,EAAKC,c,EAGPF,WAAa,WACP,EAAKrB,MAAMW,aAAe,GAC5B,EAAKQ,SAAS,CACZX,YAAa,OACbG,YAAa,OACbF,aAAc,OACdG,aAAc,OACdF,YAAa,OACbG,YAAa,U,EAKnBS,YAAc,WACR,EAAKtB,MAAMY,cAAgB,IAC7B,EAAKO,SAAS,CACZV,aAAc,EAAKT,MAAMS,aAAe,EACxCG,aAAc,MAGc,IAA5B,EAAKZ,MAAMS,cAAsB,EAAKT,MAAMY,cAAgB,IAC9D,EAAKO,SAAS,CACZV,aAAc,OACdG,aAAc,SAIY,SAA5B,EAAKZ,MAAMS,cACiB,SAA5B,EAAKT,MAAMS,cAEX,EAAKU,SAAS,CACZV,aAAc,OACdG,aAAc,U,EAKpBW,WAAa,WACP,EAAKvB,MAAMa,aAAe,GAC5B,EAAKM,SAAS,CACZT,YAAa,EAAKV,MAAMU,YAAc,EACtCG,YAAa,KAGc,IAA3B,EAAKb,MAAMU,aAAqB,EAAKV,MAAMa,aAAe,GAC5D,EAAKM,SAAS,CACZT,YAAa,OACbG,YAAa,SAIY,SAA3B,EAAKb,MAAMU,aACgB,SAA3B,EAAKV,MAAMU,aAEX,EAAKS,SAAS,CACZT,YAAa,OACbG,YAAa,U,EAKnBW,YAAc,WACZ,EAAKL,SAAS,CACZR,YAAa,IACbC,aAAc,GACdC,YAAa,GACbL,YAAa,EACbC,aAAc,EACdC,YAAa,K,wEAKf,IAAMe,EAAS,4BAAQC,QAASzB,KAAKmB,aAAtB,OACTO,EAAW,4BAAQD,QAASzB,KAAKuB,aAAtB,SACXI,EAAS3B,KAAKD,MAAMW,aAAe,OAASgB,EAAWF,EAC7D,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CACE1B,KAAK,aACLC,MAAOH,KAAKD,MAAMQ,YAClBH,OAAQJ,KAAKD,MAAMW,cAErB,kBAAC,EAAD,CACER,KAAK,UACLC,MAAOH,KAAKD,MAAMS,aAClBJ,OAAQJ,KAAKD,MAAMY,eAErB,kBAAC,EAAD,CACET,KAAK,SACLC,MAAOH,KAAKD,MAAMU,YAClBL,OAAQJ,KAAKD,MAAMa,cAEpBe,O,GA9HStB,aCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.50dcefc2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styles from \"./Alien.module.scss\";\r\n\r\nclass Alien extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.props.name}</h2>\r\n        <ul>\r\n          <li>Number of ships: {this.props.ships}</li>\r\n          <li>HP: {this.props.health}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Alien;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Alien from \"./components/Alien/Alien\";\n\nclass App extends Component {\n  state = {\n    motherShips: 1,\n    defenceShips: 5,\n    attackShips: 8,\n    motherValue: 100,\n    defenceValue: 80,\n    attackValue: 45\n  };\n\n  getRandom = () => {\n    return Math.floor(Math.random() * 12);\n  };\n\n  randomAttack = () => {\n    if (this.getRandom() === 0) {\n      this.setState({ motherValue: this.state.motherValue - 9 });\n    }\n    if (this.getRandom() >= 1 && this.getRandom() <= 6) {\n      this.setState({ defenceValue: this.state.defenceValue - 10 });\n    }\n    if (this.getRandom() >= 7 && this.getRandom() <= 12) {\n      this.setState({ attackValue: this.state.attackValue - 12 });\n    }\n  };\n\n  handleClick = () => {\n    this.randomAttack();\n    this.motherZero();\n    this.defenceZero();\n    this.attackZero();\n  };\n\n  motherZero = () => {\n    if (this.state.motherValue <= 1) {\n      this.setState({\n        motherShips: \"Dead\",\n        motherValue: \"Dead\",\n        defenceShips: \"Dead\",\n        defenceValue: \"Dead\",\n        attackShips: \"Dead\",\n        attackValue: \"Dead\"\n      });\n    }\n  };\n\n  defenceZero = () => {\n    if (this.state.defenceValue <= 10) {\n      this.setState({\n        defenceShips: this.state.defenceShips - 1,\n        defenceValue: 100\n      });\n    }\n    if (this.state.defenceShips === 1 && this.state.defenceValue <= 10) {\n      this.setState({\n        defenceShips: \"Dead\",\n        defenceValue: \"Dead\"\n      });\n    }\n    if (\n      this.state.defenceShips === \"Dead\" &&\n      this.state.defenceShips === \"Dead\"\n    ) {\n      this.setState({\n        defenceShips: \"Dead\",\n        defenceValue: \"Dead\"\n      });\n    }\n  };\n\n  attackZero = () => {\n    if (this.state.attackValue <= 9) {\n      this.setState({\n        attackShips: this.state.attackShips - 1,\n        attackValue: 80\n      });\n    }\n    if (this.state.attackShips === 1 && this.state.attackValue <= 9) {\n      this.setState({\n        attackShips: \"Dead\",\n        attackValue: \"Dead\"\n      });\n    }\n    if (\n      this.state.attackShips === \"Dead\" &&\n      this.state.attackShips === \"Dead\"\n    ) {\n      this.setState({\n        attackShips: \"Dead\",\n        attackValue: \"Dead\"\n      });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({\n      motherValue: 100,\n      defenceValue: 80,\n      attackValue: 45,\n      motherShips: 1,\n      defenceShips: 5,\n      attackShips: 8\n    });\n  };\n\n  render() {\n    const hitBtn = <button onClick={this.handleClick}>Hit</button>;\n    const resetBtn = <button onClick={this.handleReset}>Reset</button>;\n    const button = this.state.motherValue <= \"Dead\" ? resetBtn : hitBtn;\n    return (\n      <div className=\"App\">\n        <Alien\n          name=\"Mothership\"\n          ships={this.state.motherShips}\n          health={this.state.motherValue}\n        />\n        <Alien\n          name=\"Defense\"\n          ships={this.state.defenceShips}\n          health={this.state.defenceValue}\n        />\n        <Alien\n          name=\"Attack\"\n          ships={this.state.attackShips}\n          health={this.state.attackValue}\n        />\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}